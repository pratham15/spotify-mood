import { Box, Button, Center, Flex, Spinner } from "@chakra-ui/react";
import { useAtom, useAtomValue } from "jotai";
import { signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useEffect, useState } from "react";
import {
  gestureModelAtom,
  readyAtom,
  SDKReady,
  spotifyPlayerAtom,
} from "../atoms/spotifyPlayerAtom";
import Middle from "../components/Middle";
import Player from "../components/Player";
import Sidebar from "../components/sidebar";
import VideoStream from "../components/VideoStream";

export default function Home() {
  const { data: session, status } = useSession();
  const [player, setPlayer] = useAtom(spotifyPlayerAtom);
  const modelReady = useAtomValue(gestureModelAtom);
  const ready = useAtomValue(readyAtom);
  const sdkReady = useAtomValue(SDKReady);
  const [sessionReady, setSessionReady] = useState(false);

  //if (session != null && session != undefined) setSessionReady(true);
  useEffect(() => {
    if (sdkReady) {
      const spotifyPlayer = new window.Spotify.Player({
        name: "Web Playback SDK",
        getOAuthToken: (cb) => {
          cb(session.user.accessToken);
        },
        volume: 0.5,
      });

      spotifyPlayer.addListener("ready", async ({ device_id }) => {
        setTimeout(async () => {
          await fetch(`/api/transferState?device_id=${device_id}`, {
            headers: {
              Authorization: `Bearer ${session.user.accessToken}`,
            },
          });
          console.log("Ready with Device ID", device_id);
          setPlayer(spotifyPlayer);
        }, 1000);
      });

      spotifyPlayer.addListener("not_ready", ({ device_id }) => {
        console.log("Device ID has gone offline", device_id);
      });

      spotifyPlayer.addListener("player_state_changed", async (state) => {
        if (!state) {
          return;
        }
        // add code for listeners
      });

      spotifyPlayer.connect();
    }
  }, [sdkReady]);

  return (
    <>
      <Head>
        <title>Spotify Mood</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* {ready ? (
        <Flex gap="10" bg="black" height={"full"} overflow="hidden">
          <Sidebar />
          <Button onClick={() => player.togglePlay()}>Toggle</Button>
          <Button onClick={nextTrack}>Next</Button>
          <VideoStream />
        </Flex>
      ) : (
        <Center height="full">
          <Spinner size={"lg"} />
        </Center>
      )} */}
      <Box h="calc(100vh)" overflow={"hidden"} bg="black" width={"full"}>
        <Flex w="full" height="full">
          <Sidebar />
          <Middle />
        </Flex>
        <Player />
      </Box>
      <VideoStream />
    </>
  );
}
