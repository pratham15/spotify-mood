import { Box, Button, Flex } from "@chakra-ui/react";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useEffect, useState } from "react";
import { useRecoilState } from "recoil";
import { songInfo } from "../atoms/songInfo";
import Sidebar from "../components/sidebar";
import VideoStream from "../components/VideoStream";
import useSpotify from "../hooks/useSpotify";
const track = {
  name: "",
  album: {
    images: [{ url: "" }],
  },
  artists: [{ name: "" }],
};
export default function Home() {
  const { data: session, status } = useSession();
  const [is_paused, setPaused] = useState(false);
  const [is_active, setActive] = useState(false);
  const [current_track, setTrack] = useState(track);
  //const [player, setPlayer] = useState();

  //const player = useSpotify();
  const [player, setPlayer] = useRecoilState(songInfo);
  useEffect(() => {
    window.onSpotifyWebPlaybackSDKReady = () => {
      if (session != null && session != undefined) {
        console.log("here");
        const spotifyPlayer = new window.Spotify.Player({
          name: "Web Playback SDK",
          getOAuthToken: (cb) => {
            cb(session.user.accessToken);
          },
          volume: 0.5,
        });

        spotifyPlayer.addListener("ready", ({ device_id }) => {
          setPlayer(spotifyPlayer);
          console.log("Ready with Device ID", device_id);
        });

        spotifyPlayer.addListener("not_ready", ({ device_id }) => {
          console.log("Device ID has gone offline", device_id);
        });

        spotifyPlayer.addListener("player_state_changed", async (state) => {
          if (!state) {
            return;
          }
          setTrack(state.track_window.current_track);
          setPaused(state.paused);

          spotifyPlayer.getCurrentState().then((state) => {
            !state ? setActive(false) : setActive(true);
          });
        });

        spotifyPlayer.connect();
        spotifyPlayer.activateElement();
      }
    };

    // init();
    // };
  }, [session]);
  const nextTrack = () => {
    console.log(player);
    player.nextTrack();
    console.log(current_track);
  };

  const getData = async () => {
    const resp = await fetch(`/api/transferState`, {
      headers: {
        Authorization: `Bearer ${session.user.accessToken}`,
        "Content-Type": "application/json",
      },
    });
    console.log(await resp.json());
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex gap="10" bg="black" height={"full"} overflow="hidden">
        <Sidebar />
        <Button onClick={() => player.togglePlay()}>Toggle</Button>
        <Button onClick={nextTrack}>Next</Button>
        <Button onClick={getData}>Data</Button>
        <VideoStream player={player} />
      </Flex>
    </>
  );
}
